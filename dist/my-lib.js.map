{"version":3,"file":"my-lib.js","sources":["../src/lib/constants.ts","../src/lib/StreamAbstraction.ts","../src/lib/BlocBase.ts","../src/lib/Bloc.ts","../src/lib/Cubit.ts","../src/lib/BlocConsumer.ts","../src/lib/react/blocReact.tsx"],"sourcesContent":["import { BlocOptions } from \"./types\";\n\nexport const LOCAL_STORAGE_PREFIX = \"data.\";\n\nexport const cubitDefaultOptions: Required<BlocOptions> = {\n  persistKey: \"\",\n  persistData: true,\n};\n","import { BehaviorSubject, Subscription } from \"rxjs\";\nimport { BlocOptions } from \"./types\";\nimport { cubitDefaultOptions, LOCAL_STORAGE_PREFIX } from \"./constants\";\n\nexport default class StreamAbstraction<T> {\n  protected readonly _options: BlocOptions;\n  private _subject: BehaviorSubject<T>;\n\n  constructor(initialValue: T, blocOptions: BlocOptions = {}) {\n    let value: any = initialValue;\n    const options = { ...cubitDefaultOptions, ...blocOptions };\n    this._options = options;\n\n    if (options.persistKey && options.persistData) {\n      const cachedValue = this.getCachedValue();\n      if (!(cachedValue instanceof Error)) {\n        value = cachedValue;\n      }\n    }\n\n    this._subject = new BehaviorSubject(value);\n  }\n\n  public get state(): T {\n    return this._subject.getValue();\n  }\n\n  public subscribe = (\n    next?: (value: T) => void,\n    error?: (error: any) => void,\n    complete?: () => void\n  ): Subscription => this._subject.subscribe(next, error, complete);\n\n  public complete = (): void => this._subject.complete();\n\n  public clearCache = (): void => {\n    const key = this._options.persistKey;\n    if (key) {\n      localStorage.removeItem(`${LOCAL_STORAGE_PREFIX}${key}`);\n    }\n  };\n\n  protected next = (value: T): void => {\n    this._subject.next(value);\n    this.updateCache();\n  };\n\n  protected parseFromCache = (state: string): T => {\n    return JSON.parse(state).state;\n  };\n\n  protected parseToCache = (state: T): string => {\n    return JSON.stringify({ state });\n  };\n\n  protected getCachedValue = (): T | Error => {\n    const cachedValue = localStorage.getItem(\n      `${LOCAL_STORAGE_PREFIX}${this._options.persistKey}`\n    );\n    if (cachedValue) {\n      try {\n        return this.parseFromCache(cachedValue);\n      } catch (e) {\n        const error = new Error(\n          `Failed to parse JSON in localstorage for the key: \"${LOCAL_STORAGE_PREFIX}${this._options.persistKey}\"`\n        );\n        console.error(error);\n        return error;\n      }\n    }\n    return new Error(\"Key not found\");\n  };\n\n  protected updateCache = (): void => {\n    const { persistData, persistKey } = this._options;\n    if (persistData && persistKey) {\n      localStorage.setItem(\n        `${LOCAL_STORAGE_PREFIX}${persistKey}`,\n        this.parseToCache(this.state)\n      );\n    } else {\n      this.clearCache();\n    }\n  };\n}\n","import { BlocConsumer } from \"./BlocConsumer\";\nimport StreamAbstraction from \"./StreamAbstraction\";\nimport { BlocOptions } from \"./types\";\n\nexport default class BlocBase<T> extends StreamAbstraction<T> {\n  _localProviderRef = \"\";\n  onRegister: null | ((consumer: BlocConsumer) => void) = null;\n  onChange: null | ((change: { currentState: T; nextState: T }) => void) = null;\n\n  constructor(initialValue: T, blocOptions: BlocOptions = {}) {\n    super(initialValue, blocOptions);\n  }\n\n  private _consumer: BlocConsumer | null = null;\n\n  set consumer(consumer: BlocConsumer) {\n    this._consumer = consumer;\n  }\n\n  protected notifyChange = (state: T): void => {\n    this.onChange?.({\n      currentState: this.state,\n      nextState: state,\n    });\n  };\n}\n","import BlocBase from \"./BlocBase\";\nimport { BlocOptions } from \"./types\";\n\nexport default class Bloc<E, T> extends BlocBase<T> {\n  protected onTransition:\n    | null\n    | ((change: { currentState: T; event: E; nextState: T }) => void) = null;\n  protected mapEventToState: null | ((event: E) => T) = null;\n\n  constructor(initialState: T, options?: BlocOptions) {\n    super(initialState, options);\n  }\n\n  public add = (event: E): void => {\n    if (this.mapEventToState) {\n      const newState = this.mapEventToState(event);\n      this.notifyChange(newState);\n      this.notifyTransition(newState, event);\n      this.next(newState);\n    } else {\n      console.error(\n        `\"mapEventToState\" not implemented for \"${this.constructor.name}\"`\n      );\n    }\n  };\n\n  protected notifyTransition = (value: T, event: E): void => {\n    this.onTransition?.({\n      currentState: this.state,\n      event,\n      nextState: value,\n    });\n  };\n}\n","import BlocBase from \"./BlocBase\";\n\nexport default class Cubit<T> extends BlocBase<T> {\n  protected emit = (value: T): void => {\n    this.notifyChange(value);\n    this.next(value);\n  };\n}\n","import BlocBase from \"./BlocBase\";\nimport { BlocClass, ValueType } from \"./types\";\n\nexport interface ReactBlocOptions {\n  /** Enables debugging which calls BlocReact.observer every time a Subject is updated. Defaults to false */\n  debug?: boolean;\n}\n\nexport type BlocObserverScope = \"local\" | \"global\" | \"all\";\ntype BlocObserver = [\n  BlocClass<any>,\n  (bloc: any, state: any) => unknown,\n  BlocObserverScope\n];\n\nexport class BlocConsumer {\n  observer: null | ((bloc: BlocBase<any>, value: any) => void) = null;\n  debug: boolean;\n  readonly blocListGlobal: BlocBase<any>[];\n  protected _blocMapLocal: Record<string, BlocBase<any>> = {};\n  private blocObservers: BlocObserver[] = [];\n\n  // private _contextMapLocal: Record<string, React.Context<Cubit<any>>> = {}\n\n  constructor(blocs: BlocBase<any>[], options: ReactBlocOptions = {}) {\n    this.blocListGlobal = blocs;\n    // this._contextGlobal = React.createContext(blocs);\n    this.debug = options.debug || false;\n\n    for (const b of blocs) {\n      b.consumer = this;\n      b.subscribe((v: any) => this.notify(b, v));\n      b.onRegister?.(this);\n    }\n  }\n\n  notify(bloc: BlocBase<any>, state: ValueType<any>): void {\n    if (this.observer) {\n      this.observer(bloc, state);\n    }\n\n    for (const [blocClass, callback, scope] of this.blocObservers) {\n      const isGlobal = this.blocListGlobal.indexOf(bloc) !== -1;\n      const matchesScope =\n        scope === \"all\" ||\n        (isGlobal && scope === \"global\") ||\n        (!isGlobal && scope === \"local\");\n      if (matchesScope && bloc instanceof blocClass) {\n        callback(bloc, state);\n      }\n    }\n  }\n\n  public addBlocObserver<T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    callback: (bloc: T, state: ValueType<T>) => unknown,\n    scope: BlocObserverScope = \"all\"\n  ) {\n    this.blocObservers.push([blocClass, callback, scope]);\n  }\n\n  public addLocalBloc(key: string, bloc: BlocBase<any>) {\n    this._blocMapLocal[key] = bloc;\n    bloc.subscribe((v: any) => this.notify(bloc, v));\n  }\n\n  public removeLocalBloc(key: string) {\n    const bloc = this._blocMapLocal[key];\n    if (bloc) {\n      bloc.complete();\n      delete this._blocMapLocal[key];\n    }\n  }\n}\n","import React, { ReactElement, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport BlocBase from \"../BlocBase\";\nimport { BlocClass, BlocHookData, ValueType } from \"../types\";\nimport { BlocConsumer } from \"../BlocConsumer\";\n\ninterface ReactBlocOptions {\n  /** Enables debugging which calls BlocReact.observer every time a Subject is updated. Defaults to false */\n  debug?: boolean;\n}\n\ninterface BlocHookOptions<T extends BlocBase<any>> {\n  subscribe?: boolean;\n  shouldUpdate?: (previousState: ValueType<T>, state: ValueType<T>) => boolean;\n}\n\nconst defaultBlocHookOptions: BlocHookOptions<any> = {\n  subscribe: true,\n};\n\nclass BlocRuntimeError {\n  error: Error;\n\n  constructor(message?: string) {\n    this.error = new Error(message);\n  }\n}\n\nexport class BlocReact extends BlocConsumer {\n  private readonly _contextGlobal: React.Context<BlocBase<any>[]>;\n  private _contextLocalProviderKey = React.createContext(\"\");\n\n  // private _contextMapLocal: Record<string, React.Context<Cubit<any>>> = {}\n\n  constructor(blocs: BlocBase<any>[], options: ReactBlocOptions = {}) {\n    super(blocs, options);\n    this._contextGlobal = React.createContext(blocs);\n  }\n\n  useBloc = <T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    options: BlocHookOptions<T> = {}\n  ): BlocHookData<T> => {\n    const mergedOptions: BlocHookOptions<T> = {\n      ...defaultBlocHookOptions,\n      ...options,\n    };\n\n    const localProviderKey = useContext(this._contextLocalProviderKey);\n    const localBlocInstance = this._blocMapLocal[localProviderKey];\n\n    const { subscribe, shouldUpdate = true } = mergedOptions;\n    const blocs = useContext(this._contextGlobal);\n    const blocInstance =\n      localBlocInstance || blocs.find((c) => c instanceof blocClass);\n\n    if (!blocInstance) {\n      const name = blocClass.prototype.constructor.name;\n      const error = new BlocRuntimeError(`\"${name}\" \n      no bloc with this name was found in the global context.\n      \n      # Solutions:\n      \n      1. Wrap your code in a BlocProvider.\n      \n      2. Add \"${name}\" to the \"BlocReact\" constructor:\n        const state = new BlocReact(\n          [\n            ...\n            new ${name}(),\n          ]\n        )\n      `);\n      console.error(error.error);\n      return ([\n        (e: null) => e,\n        {},\n        {\n          error,\n          complete: true,\n        },\n      ] as unknown) as BlocHookData<T>;\n    }\n\n    const [data, setData] = useState(blocInstance.state);\n    const [error, setError] = useState();\n    const [complete, setComplete] = useState(false);\n\n    const updateData = useCallback((newState: ValueType<T>) => {\n      if (shouldUpdate === true || shouldUpdate(data, newState)) {\n        setData(newState);\n      }\n    }, []);\n\n    useEffect(() => {\n      if (subscribe) {\n        const subscription = blocInstance.subscribe(updateData, setError, () =>\n          setComplete(true)\n        );\n        return () => subscription.unsubscribe();\n      }\n    }, [this._contextGlobal]);\n\n    return [\n      data,\n      blocInstance as T,\n      {\n        error,\n        complete,\n      },\n    ];\n  };\n\n  // Components\n  BlocBuilder = <T extends BlocBase<any>>(props: {\n    blocClass: BlocClass<T>;\n    builder: (data: BlocHookData<T>) => ReactElement;\n    shouldUpdate?: (\n      previousState: ValueType<T>,\n      state: ValueType<T>\n    ) => boolean;\n  }): ReactElement | null => {\n    const hook = this.useBloc(props.blocClass, {\n      shouldUpdate: props.shouldUpdate,\n    });\n    return props.builder(hook);\n  };\n\n  GlobalBlocProvider = (props: {\n    children?: ReactElement | ReactElement[];\n  }): ReactElement => {\n    return (\n      <this._contextGlobal.Provider value={this.blocListGlobal}>\n        {props.children}\n      </this._contextGlobal.Provider>\n    );\n  };\n\n  BlocProvider = <T extends BlocBase<any>>(props: {\n    children?: ReactElement | ReactElement[];\n    create: (providerKey: string) => T;\n  }): ReactElement => {\n    const providerKey = useMemo(() => \"p_\" + nanoid(), []);\n\n    const bloc = useMemo<T>(() => {\n      const newBloc = props.create(providerKey);\n      newBloc._localProviderRef = providerKey;\n      this.addLocalBloc(providerKey, newBloc);\n\n      return newBloc;\n    }, []);\n\n    const context = useMemo<React.Context<BlocBase<any>>>(() => {\n      return React.createContext<BlocBase<any>>(bloc);\n      // this._contextMapLocal[providerKey] = newContext;\n    }, [bloc]);\n\n    useEffect(() => {\n      return () => {\n        this.removeLocalBloc(providerKey);\n      };\n    }, []);\n\n    return (\n      <this._contextLocalProviderKey.Provider value={providerKey}>\n        <context.Provider value={bloc}>{props.children}</context.Provider>\n      </this._contextLocalProviderKey.Provider>\n    );\n  };\n}\n"],"names":["BehaviorSubject","React","useContext","useState","useCallback","useMemo","nanoid"],"mappings":"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"}