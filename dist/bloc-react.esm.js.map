{"version":3,"file":"bloc-react.esm.js","sources":["../src/lib/constants.ts","../src/lib/createId.ts","../src/lib/StreamAbstraction.ts","../src/lib/BlocBase.ts","../src/lib/Bloc.ts","../src/lib/Cubit.ts","../src/lib/BlocObserver.ts","../src/lib/BlocConsumer.ts","../src/lib/react/BlocReact.tsx"],"sourcesContent":["import { BlocOptions } from \"./types\";\n\nexport const LOCAL_STORAGE_PREFIX = \"data.\";\n\nexport const cubitDefaultOptions: Required<BlocOptions> = {\n  persistKey: \"\",\n  persistData: true,\n};\n","const createId = (): string => {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nexport default createId;","import { BlocOptions } from \"./types\";\nimport { cubitDefaultOptions, LOCAL_STORAGE_PREFIX } from \"./constants\";\nimport createId from \"./createId\";\n\nexport interface Observer<T> {\n  next: (v: any) => void;\n}\n\ninterface ObserverListItem<T> {\n  observer: Observer<T>;\n  id: string;\n}\n\nexport interface Subscription {\n  unsubscribe: () => void;\n}\n\nexport class BehaviorSubject<T> {\n  public isClosed = false;\n  private prevValue: T | undefined;\n  private value: T\n  private observers: ObserverListItem<T>[] = [];\n\n  constructor(initialValue: T) {\n    this.value = initialValue;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  subscribe(observer: Observer<T>): Subscription {\n    const id = createId();\n    this.observers.push({observer, id});\n    this.triggerObservers();\n    return {\n      unsubscribe: () => this.removeObserver(id)\n    } as Subscription\n  }\n\n  complete() {\n    this.observers = [];\n    this.isClosed = true;\n  }\n\n  next(value: T) {\n    this.value = value;\n    this.triggerObservers()\n  }\n\n  private triggerObservers() {\n    this.observers.forEach(({observer}) => {\n      observer.next(this.value);\n    })\n  }\n\n  private removeObserver(removeId: string) {\n    this.observers = this.observers.filter(({id}) => id !== removeId);\n  }\n}\n\ntype RemoveMethods = () => void;\nexport default class StreamAbstraction<T> {\n  public isClosed = false;\n  public removeListeners: Array<RemoveMethods> = [];\n  protected readonly _options: BlocOptions;\n  private _subject: BehaviorSubject<T>;\n\n  constructor(initialValue: T, blocOptions: BlocOptions = {}) {\n    let value: any = initialValue;\n    const options = { ...cubitDefaultOptions, ...blocOptions };\n    this._options = options;\n\n    if (options.persistKey && options.persistData) {\n      const cachedValue = this.getCachedValue();\n      if (!(cachedValue instanceof Error)) {\n        value = cachedValue;\n      }\n    }\n\n    this._subject = new BehaviorSubject(value);\n  }\n\n  public get state(): T {\n    return this._subject.getValue();\n  }\n\n  readonly removeRemoveListener = (index: number) => {\n    this.removeListeners.splice(index, 1);\n  }\n\n  readonly addRemoveListener = (method: RemoveMethods) => {\n    const index = this.removeListeners.length;\n    this.removeListeners.push(method);\n    return () => this.removeRemoveListener(index);\n  }\n\n  public subscribe = (observer: Observer<T>): Subscription => this._subject.subscribe({\n    next: observer.next,\n  });\n\n  public complete = (): void => {\n    this.isClosed = true;\n    this._subject.complete();\n  }\n\n  public clearCache = (): void => {\n    const key = this._options.persistKey;\n    if (key) {\n      localStorage.removeItem(`${LOCAL_STORAGE_PREFIX}${key}`);\n    }\n  };\n\n  jsonToState(state: string): T {\n    return JSON.parse(state).state;\n  }\n\n  stateToJson(state: T): string {\n    return JSON.stringify({ state });\n  }\n\n  protected next = (value: T): void => {\n    this._subject.next(value);\n    this.updateCache();\n  };\n\n  protected getCachedValue = (): T | Error => {\n    const cachedValue = localStorage.getItem(\n      `${LOCAL_STORAGE_PREFIX}${this._options.persistKey}`\n    );\n    if (cachedValue) {\n      try {\n        return this.jsonToState(cachedValue);\n      } catch (e) {\n        const error = new Error(\n          `Failed to parse JSON in localstorage for the key: \"${LOCAL_STORAGE_PREFIX}${this._options.persistKey}\"`\n        );\n        console.error(error);\n        return error;\n      }\n    }\n    return new Error(\"Key not found\");\n  };\n\n  protected updateCache = (): void => {\n    const { persistData, persistKey } = this._options;\n    if (persistData && persistKey) {\n      localStorage.setItem(\n        `${LOCAL_STORAGE_PREFIX}${persistKey}`,\n        this.stateToJson(this.state)\n      );\n    } else {\n      this.clearCache();\n    }\n  };\n}\n","import { BlocConsumer } from \"./BlocConsumer\";\nimport StreamAbstraction from \"./StreamAbstraction\";\nimport { BlocOptions, ChangeEvent } from \"./types\";\nimport createId from \"./createId\";\n\nexport interface BlocMeta {\n  scope: 'unknown' | 'local' | 'global'\n}\n\ntype ChangeMethod = <T>(change: ChangeEvent<T>, bloc: BlocBase<T>) => void\ntype RegisterMethod = <T>(consumer: BlocConsumer, bloc: BlocBase<T>) => void\ntype ValueChangeMethod = <T>(value: T, bloc: BlocBase<T>) => void;\n\nexport default class BlocBase<T> extends StreamAbstraction<T> {\n  public id = createId();\n  public createdAt = new Date();\n  public meta: BlocMeta = {\n    scope: 'unknown'\n  }\n  public changeListeners: ChangeMethod[] = [];\n  public registerListeners: RegisterMethod[] = [];\n  public valueChangeListeners: ValueChangeMethod[] = [];\n  public consumer: BlocConsumer | null = null;\n\n  constructor(initialValue: T, blocOptions: BlocOptions = {}) {\n    super(initialValue, blocOptions);\n  }\n\n  // listeners\n  readonly removeChangeListener = (index: number) => {\n    this.changeListeners.splice(index, 1);\n  }\n\n  readonly addChangeListener = (method: ChangeMethod) => {\n    const index = this.changeListeners.length;\n    this.changeListeners.push(method);\n    return () => this.removeChangeListener(index);\n  }\n\n  readonly removeValueChangeListener = (index: number) => {\n    this.valueChangeListeners.splice(index, 1);\n  }\n\n  readonly addValueChangeListener = (method: ValueChangeMethod) => {\n    const index = this.valueChangeListeners.length;\n    this.valueChangeListeners.push(method);\n    return () => this.removeValueChangeListener(index);\n  }\n\n  readonly removeRegisterListener = (index: number) => {\n    this.registerListeners.splice(index, 1);\n  }\n\n  readonly addRegisterListener = (method: RegisterMethod) => {\n    const index = this.registerListeners.length;\n    this.registerListeners.push(method);\n    return () => this.removeRegisterListener(index);\n  }\n\n  readonly notifyChange = (state: T): void => {\n    this.consumer?.notifyChange(this, state);\n\n    this.changeListeners.forEach(fn => fn({\n      currentState: this.state,\n      nextState: state,\n    }, this))\n  };\n\n  readonly notifyValueChange = (): void => {\n    this.consumer?.notifyValueChange(this);\n    this.valueChangeListeners.forEach(fn => fn(this.state, this))\n  };\n}\n","import BlocBase from \"./BlocBase\";\nimport { BlocOptions } from \"./types\";\n\nexport default class Bloc<E, T> extends BlocBase<T> {\n  onTransition:\n    | null\n    | ((change: { currentState: T; event: E; nextState: T }) => void) = null;\n  protected mapEventToState: null | ((event: E) => T) = null;\n\n  constructor(initialState: T, options?: BlocOptions) {\n    super(initialState, options);\n  }\n\n  public add = (event: E): void => {\n    if (this.mapEventToState) {\n      const newState = this.mapEventToState(event);\n      this.notifyChange(newState);\n      this.notifyTransition(newState, event);\n      this.next(newState);\n      this.notifyValueChange();\n    } else {\n      console.error(\n        `\"mapEventToState\" not implemented for \"${this.constructor.name}\"`\n      );\n    }\n  };\n\n  protected notifyTransition = (state: T, event: E): void => {\n    this.consumer?.notifyTransition(this, state, event);\n    this.onTransition?.({\n      currentState: this.state,\n      event,\n      nextState: state,\n    })\n  };\n}\n","import BlocBase from \"./BlocBase\";\n\nexport default class Cubit<T> extends BlocBase<T> {\n  public emit = (value: T): void => {\n    this.notifyChange(value);\n    this.next(value);\n    this.notifyValueChange();\n  };\n}\n","import BlocBase from \"./BlocBase\";\nimport { ChangeEvent, TransitionEvent } from \"./types\";\n\nexport interface BlocObserverOptions {\n  /* Called whenever any state changes global or local, Bloc or Cubit. */\n  onChange?: (bloc: BlocBase<any>, event: ChangeEvent<any>) => void;\n  /* Called only when a Bloc changes (global or local). */\n  onTransition?: (bloc: BlocBase<any>, event: TransitionEvent<any, any>) => void;\n}\n\n\nexport default class BlocObserver {\n  onChange: (bloc: BlocBase<any>, event: ChangeEvent<any>) => void\n  onTransition: (bloc: BlocBase<any>, event: TransitionEvent<any, any>) => void\n\n  constructor(methods: BlocObserverOptions = {}) {\n    this.onChange = methods.onChange ? methods.onChange : this.defaultAction;\n    this.onTransition = methods.onTransition ? methods.onTransition : this.defaultAction;\n  }\n\n  // trigger events\n  readonly addChange = (bloc: BlocBase<any>, state: any) => {\n    this.onChange(bloc, this.createChangeEvent(bloc, state));\n  }\n\n  readonly addTransition = (bloc: BlocBase<any>, state: any, event: any) => {\n    this.onTransition(bloc, this.createTransitionEvent(bloc, state, event));\n  }\n  readonly addBlocAdded = (bloc: BlocBase<any>) => {\n    this.onBlocAdded(bloc);\n  }\n  readonly addBlocRemoved = (bloc: BlocBase<any>) => {\n    this.onBlocRemoved(bloc);\n  }\n\n\n  // consume\n  private readonly defaultAction = () => {}\n\n  onBlocAdded: (bloc: BlocBase<any>) => void = this.defaultAction\n  onBlocRemoved: (bloc: BlocBase<any>) => void = this.defaultAction\n\n  private createTransitionEvent(bloc: BlocBase<any>, state: any, event: any): TransitionEvent<any, any> {\n    return {\n      currentState: bloc.state,\n      event,\n      nextState: state,\n    }\n  }\n\n  private createChangeEvent(bloc: BlocBase<any>, state: any): ChangeEvent<any> {\n    return {\n      currentState: bloc.state,\n      nextState: state,\n    }\n  }\n}","import BlocBase from \"./BlocBase\";\nimport { BlocClass, ChangeEvent, ValueType } from \"./types\";\nimport BlocObserver from \"./BlocObserver\";\n\nexport interface ReactBlocOptions {\n  /** Enables debugging which calls BlocReact.observer every time a Subject is updated. Defaults to false */\n  debug?: boolean;\n}\n\nexport type BlocObserverScope = \"local\" | \"global\" | \"all\";\ntype BlocChangeObserverList = [\n  BlocClass<any>,\n  (bloc: any, event: ChangeEvent<any>) => unknown,\n  BlocObserverScope\n];\n\ntype BlocValueChangeObserverList = [\n  BlocClass<any>,\n  (bloc: any) => unknown,\n  BlocObserverScope\n];\n\nexport interface ProviderItem {\n  id: string,\n  parent?: string,\n  bloc: BlocBase<any>,\n}\n\n\nexport interface ConsumerOptions {\n  observer?: BlocObserver;\n  // middleware?: BlocMiddleware[]\n}\n\nexport class BlocConsumer {\n  observer: BlocObserver;\n  public mocksEnabled = false;\n  public providerList: ProviderItem[] = [];\n  private blocListGlobal: BlocBase<any>[];\n  private blocChangeObservers: BlocChangeObserverList[] = [];\n  private blocValueChangeObservers: BlocValueChangeObserverList[] = [];\n  private mockBlocs: BlocBase<any>[] = [];\n\n  constructor(blocs: BlocBase<any>[], options: ConsumerOptions = {}) {\n    this.blocListGlobal = blocs;\n    this.observer = options.observer || new BlocObserver();\n\n    for (const b of blocs) {\n      b.consumer = this;\n      b.registerListeners.forEach(fn => fn(this, b));\n      b.meta.scope = 'global';\n      this.observer.addBlocAdded(b);\n    }\n  }\n\n  notifyChange(bloc: BlocBase<any>, state: any): void {\n    if (bloc.isClosed) {\n      return\n    }\n\n    this.observer.addChange(bloc, state);\n\n    for (const [blocClass, callback, scope] of this.blocChangeObservers) {\n      const isGlobal = this.blocListGlobal.indexOf(bloc) !== -1;\n      const matchesScope =\n        scope === \"all\" ||\n        (isGlobal && scope === \"global\") ||\n        (!isGlobal && scope === \"local\");\n      if (matchesScope && bloc instanceof blocClass) {\n        callback(bloc, {\n          nextState: state,\n          currentState: bloc.state\n        });\n      }\n    }\n  }\n\n  notifyValueChange(bloc: BlocBase<any>): void {\n    if (bloc.isClosed) {\n      return\n    }\n\n    for (const [blocClass, callback, scope] of this.blocValueChangeObservers) {\n      const isGlobal = this.blocListGlobal.indexOf(bloc) !== -1;\n      const matchesScope =\n        scope === \"all\" ||\n        (isGlobal && scope === \"global\") ||\n        (!isGlobal && scope === \"local\");\n      if (matchesScope && bloc instanceof blocClass) {\n        callback(bloc);\n      }\n    }\n  }\n\n  notifyTransition(bloc: BlocBase<any>, state: any, event: any): void {\n    if (bloc.isClosed) {\n      return\n    }\n\n    this.observer.addTransition(bloc, state, event);\n  }\n\n  public addBlocChangeObserver<T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    callback: (bloc: T, event: ChangeEvent<ValueType<T>>) => unknown,\n    scope: BlocObserverScope = \"all\"\n  ) {\n    this.blocChangeObservers.push([blocClass, callback, scope]);\n  }\n\n  public addBlocValueChangeObserver<T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    callback: (bloc: T) => unknown,\n    scope: BlocObserverScope = \"all\"\n  ) {\n    this.blocValueChangeObservers.push([blocClass, callback, scope]);\n  }\n\n  public addLocalBloc(item: ProviderItem) {\n    this.providerList.push(item);\n    item.bloc.consumer = this;\n    item.bloc.registerListeners.forEach(fn => fn(this, item.bloc));\n    item.bloc.meta.scope = 'local';\n    this.observer.addBlocAdded(item.bloc);\n  }\n\n  public removeLocalBloc(id: string, bloc: BlocBase<any>) {\n    const item = this.providerList.find(i => i.id === id && i.bloc === bloc);\n\n    if (item) {\n      item.bloc.complete();\n      item.bloc.removeListeners.forEach(fn => fn());\n      this.observer.addBlocRemoved(item.bloc);\n      this.providerList = this.providerList.filter(i => i !== item);\n    }\n  }\n\n  public addBlocMock(bloc: BlocBase<any>): void {\n    if (this.mocksEnabled) {\n      this.mockBlocs = [bloc, ...this.mockBlocs];\n    }\n  }\n\n  public resetMocks(): void {\n    this.mockBlocs = [];\n  }\n\n  public getGlobalBloc(blocClass: BlocClass<any>): undefined | BlocBase<any> {\n    if (this.mocksEnabled) {\n      const mockedBloc = this.mockBlocs.find((c) => c instanceof blocClass);\n      if (mockedBloc) {\n        return mockedBloc;\n      }\n    }\n\n    return this.blocListGlobal.find(c => c instanceof blocClass);\n  }\n\n  public getLocalBlocForProvider<T>(id: string, blocClass: BlocClass<T>): BlocBase<T> | undefined {\n    for (const providerItem of this.providerList) {\n      if (providerItem.id === id) {\n        if (providerItem.bloc instanceof blocClass) {\n          return providerItem.bloc;\n        }\n\n        let parent = providerItem.parent;\n        while (parent) {\n          const parentItem = this.providerList.find(i => i.id === parent);\n          if (parentItem?.bloc instanceof blocClass) {\n            return parentItem.bloc;\n          }\n\n          parent = parentItem?.parent;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  protected getGlobalBlocInstance<T>(global: BlocBase<any>[], blocClass: BlocClass<T>): BlocBase<T> | undefined {\n    if (this.mocksEnabled) {\n      const mockedBloc = this.mockBlocs.find((c) => c instanceof blocClass);\n      if (mockedBloc) {\n        return mockedBloc;\n      }\n    }\n\n    return global.find((c) => c instanceof blocClass);\n  }\n}\n","import React, { ComponentType, FC, ReactElement, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport BlocBase from \"../BlocBase\";\nimport { BlocClass, BlocHookData, ChangeEvent, ValueType } from \"../types\";\nimport { BlocConsumer, ConsumerOptions } from \"../BlocConsumer\";\nimport createId from \"../createId\";\n\ninterface ReactBlocOptions {\n}\n\ninterface BlocHookOptions<T extends BlocBase<any>> {\n  /*\n  Boolean value if the hook should update the returned state value when the BLoC state changes.\n  Set it to false if you only need access to the methods of a Cubit, or the `add` method on a Bloc\n   */\n  subscribe?: boolean;\n  /*\n  Decide weather the returned state value should be updated or not. Will have no effect if `subscribe` is false.\n  Receives a ChangeEvent<T> as a parameter and expects a boolean return value.\n   */\n  shouldUpdate?: (event: ChangeEvent<ValueType<T>>) => boolean;\n  /*\n  Create a new instance of the bloc, this bloc is not added to the global or any local state.\n   */\n  create?: () => T;\n}\n\nconst defaultBlocHookOptions: BlocHookOptions<any> = {\n  subscribe: true\n};\n\nclass BlocRuntimeError {\n  error: Error;\n\n  constructor(message?: string) {\n    this.error = new Error(message);\n  }\n}\n\nclass NoValue {\n}\n\nexport class BlocReact extends BlocConsumer {\n  private providerCount = 0;\n  private readonly _blocsGlobal: BlocBase<any>[];\n  private _contextLocalProviderKey = React.createContext<string>(\"none\");\n\n  constructor(blocs: BlocBase<any>[], options?: ConsumerOptions) {\n    super(blocs, options);\n    this._blocsGlobal = blocs;\n    this.BlocProvider = this.BlocProvider.bind(this);\n    this.BlocBuilder = this.BlocBuilder.bind(this);\n  }\n\n  useBloc = <T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    options: BlocHookOptions<T> = {}\n  ): BlocHookData<T> => {\n    const mergedOptions: BlocHookOptions<T> = {\n      ...defaultBlocHookOptions,\n      ...options\n    };\n    let blocInstance: BlocBase<T> | undefined = useMemo(() => options.create ? options.create() : undefined, []);\n\n    if (!blocInstance) {\n      const localProviderKey = useContext(this._contextLocalProviderKey);\n      const localBlocInstance = useMemo(() => this.getLocalBlocForProvider(localProviderKey, blocClass), []);\n      blocInstance = useMemo(() => localBlocInstance || this.getGlobalBlocInstance(this._blocsGlobal, blocClass), []);\n    }\n\n    const { subscribe, shouldUpdate = true } = mergedOptions;\n\n    if (!blocInstance) {\n      const name = blocClass.prototype.constructor.name;\n      const error = new BlocRuntimeError(`\"${name}\" \n      no bloc with this name was found in the global context.\n      \n      # Solutions:\n      \n      1. Wrap your code in a BlocProvider.\n      \n      2. Add \"${name}\" to the \"BlocReact\" constructor:\n        const state = new BlocReact(\n          [\n            ...\n            new ${name}(),\n          ]\n        )\n      `);\n      console.error(error.error);\n      return ([\n        NoValue,\n        {},\n        {\n          error,\n          complete: true\n        }\n      ] as unknown) as BlocHookData<T>;\n    }\n\n    const [data, setData] = useState<ValueType<T>>(blocInstance.state as ValueType<T>);\n\n    const updateData = useCallback((nextState: ValueType<T>) => {\n      if (shouldUpdate === true || shouldUpdate({ nextState, currentState: data })) {\n        setData(nextState);\n      }\n    }, []);\n\n    useEffect(() => {\n      if (subscribe) {\n        const subscription = blocInstance?.subscribe({\n          next: updateData\n        });\n        return () => {\n          subscription?.unsubscribe();\n        };\n      }\n    }, []);\n\n    return [\n      data,\n      blocInstance as T\n    ];\n  };\n\n  // Components\n  BlocBuilder<T extends BlocBase<any>>(props: {\n    blocClass: BlocClass<T>;\n    builder: (data: BlocHookData<T>) => ReactElement;\n    shouldUpdate?: (event: ChangeEvent<ValueType<T>>) => boolean;\n  }): ReactElement | null {\n    const hook = this.useBloc(props.blocClass, {\n      shouldUpdate: props.shouldUpdate\n    });\n    return props.builder(hook);\n  };\n\n  BlocProvider<T extends BlocBase<any>>(props: {\n    children?: ReactElement | ReactElement[];\n    bloc: T | ((id: string) => T);\n  }): ReactElement {\n    const id = useMemo(() => createId(), []);\n    const localProviderKey = useContext(this._contextLocalProviderKey);\n    const bloc = useMemo<T>(() => {\n      const newBloc = typeof props.bloc === \"function\" ? props.bloc(id) : props.bloc;\n      if (newBloc) {\n        this.addLocalBloc({\n          bloc: newBloc,\n          id,\n          parent: localProviderKey\n        });\n      } else {\n        console.error(`BLoC is undefined`);\n      }\n      return newBloc;\n    }, []);\n\n    const context = useMemo<React.Context<BlocBase<any>>>(() => {\n      return React.createContext<BlocBase<any>>(bloc);\n    }, [bloc]);\n\n    useEffect(() => {\n      return () => {\n        this.removeLocalBloc(id, bloc);\n      };\n    }, []);\n\n    return (\n      <this._contextLocalProviderKey.Provider value={id}>\n        <context.Provider value={bloc}>{props.children}</context.Provider>\n      </this._contextLocalProviderKey.Provider>\n    );\n  };\n\n  withBlocProvider = <P extends {}>(bloc: BlocBase<any> | ((id: string) => BlocBase<any>)) => (Component: ComponentType<P>): FC<P> => {\n    const displayName =\n      Component.displayName || Component.name;\n\n    const Provider: FC<{\n      bloc: BlocBase<any> | ((id: string) => BlocBase<any>);\n      children?: ReactElement | ReactElement[];\n    }> = (props) => {\n      return <this.BlocProvider bloc={bloc}>{props.children}</this.BlocProvider>;\n    };\n    Provider.displayName = `withBlocProvider`;\n\n    const Wrapper: FC<P> = (props) => {\n      return (\n        <Provider bloc={bloc}>\n          <Component {...props} />\n        </Provider>\n      );\n    };\n\n    Wrapper.displayName = `withBlocProvider(${displayName})`;\n    return Wrapper;\n  };\n}\n\n"],"names":[],"mappings":"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"}