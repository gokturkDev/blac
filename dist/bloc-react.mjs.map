{"version":3,"file":"bloc-react.mjs","sources":["../src/lib/constants.ts","../src/lib/StreamAbstraction.ts","../src/lib/BlocBase.ts","../src/lib/Bloc.ts","../src/lib/Cubit.ts","../src/lib/BlocObserver.ts","../src/lib/BlocConsumer.ts","../src/lib/react/BlocReact.tsx"],"sourcesContent":["import { BlocOptions } from \"./types\";\n\nexport const LOCAL_STORAGE_PREFIX = \"data.\";\n\nexport const cubitDefaultOptions: Required<BlocOptions> = {\n  persistKey: \"\",\n  persistData: true,\n};\n","import { BehaviorSubject, Subscription } from \"rxjs\";\nimport { BlocOptions } from \"./types\";\nimport { cubitDefaultOptions, LOCAL_STORAGE_PREFIX } from \"./constants\";\n\nexport default class StreamAbstraction<T> {\n  protected readonly _options: BlocOptions;\n  private _subject: BehaviorSubject<T>;\n\n  constructor(initialValue: T, blocOptions: BlocOptions = {}) {\n    let value: any = initialValue;\n    const options = { ...cubitDefaultOptions, ...blocOptions };\n    this._options = options;\n\n    if (options.persistKey && options.persistData) {\n      const cachedValue = this.getCachedValue();\n      if (!(cachedValue instanceof Error)) {\n        value = cachedValue;\n      }\n    }\n\n    this._subject = new BehaviorSubject(value);\n  }\n\n  public get state(): T {\n    return this._subject.getValue();\n  }\n\n  public subscribe = (\n    next?: (value: any) => void\n  ): Subscription => this._subject.subscribe(next);\n\n  public complete = (): void => this._subject.complete();\n\n  public clearCache = (): void => {\n    const key = this._options.persistKey;\n    if (key) {\n      localStorage.removeItem(`${LOCAL_STORAGE_PREFIX}${key}`);\n    }\n  };\n\n  jsonToState(state: string): T {\n    return JSON.parse(state).state;\n  }\n\n  stateToJson(state: T): string {\n    return JSON.stringify({ state });\n  }\n\n  protected next = (value: T): void => {\n    this._subject.next(value);\n    this.updateCache();\n  };\n\n  protected getCachedValue = (): T | Error => {\n    const cachedValue = localStorage.getItem(\n      `${LOCAL_STORAGE_PREFIX}${this._options.persistKey}`\n    );\n    if (cachedValue) {\n      try {\n        return this.jsonToState(cachedValue);\n      } catch (e) {\n        const error = new Error(\n          `Failed to parse JSON in localstorage for the key: \"${LOCAL_STORAGE_PREFIX}${this._options.persistKey}\"`\n        );\n        console.error(error);\n        return error;\n      }\n    }\n    return new Error(\"Key not found\");\n  };\n\n  protected updateCache = (): void => {\n    const { persistData, persistKey } = this._options;\n    if (persistData && persistKey) {\n      localStorage.setItem(\n        `${LOCAL_STORAGE_PREFIX}${persistKey}`,\n        this.stateToJson(this.state)\n      );\n    } else {\n      this.clearCache();\n    }\n  };\n}\n","import { BlocConsumer } from \"./BlocConsumer\";\nimport StreamAbstraction from \"./StreamAbstraction\";\nimport { BlocOptions, ChangeEvent } from \"./types\";\n\nexport default class BlocBase<T> extends StreamAbstraction<T> {\n  _localProviderRef = \"\";\n  onRegister: null | ((consumer: BlocConsumer) => void) = null;\n  onChange: null | ((change: ChangeEvent<T>) => void) = null;\n  onValueChange: null | ((value: T) => void) = null;\n\n  constructor(initialValue: T, blocOptions: BlocOptions = {}) {\n    super(initialValue, blocOptions);\n  }\n\n  protected _consumer: BlocConsumer | null = null;\n\n  set consumer(consumer: BlocConsumer) {\n    this._consumer = consumer;\n  }\n\n  protected notifyChange = (state: T): void => {\n    this._consumer?.notifyChange(this, state);\n\n    this.onChange?.({\n      currentState: this.state,\n      nextState: state,\n    });\n  };\n\n  protected notifyValueChange = (): void => {\n    this._consumer?.notifyValueChange(this);\n    this.onValueChange?.(this.state);\n  };\n}\n","import BlocBase from \"./BlocBase\";\nimport { BlocOptions } from \"./types\";\n\nexport default class Bloc<E, T> extends BlocBase<T> {\n  onTransition:\n    | null\n    | ((change: { currentState: T; event: E; nextState: T }) => void) = null;\n  protected mapEventToState: null | ((event: E) => T) = null;\n\n  constructor(initialState: T, options?: BlocOptions) {\n    super(initialState, options);\n  }\n\n  public add = (event: E): void => {\n    if (this.mapEventToState) {\n      const newState = this.mapEventToState(event);\n      this.notifyChange(newState);\n      this.notifyTransition(newState, event);\n      this.next(newState);\n      this.notifyValueChange();\n    } else {\n      console.error(\n        `\"mapEventToState\" not implemented for \"${this.constructor.name}\"`\n      );\n    }\n  };\n\n  protected notifyTransition = (state: T, event: E): void => {\n    this._consumer?.notifyTransition(this, state, event);\n    this.onTransition?.({\n      currentState: this.state,\n      event,\n      nextState: state,\n    })\n  };\n}\n","import BlocBase from \"./BlocBase\";\n\nexport default class Cubit<T> extends BlocBase<T> {\n  public emit = (value: T): void => {\n    this.notifyChange(value);\n    this.next(value);\n    this.notifyValueChange();\n  };\n}\n","import BlocBase from \"./BlocBase\";\nimport { ChangeEvent, TransitionEvent } from \"./types\";\n\nexport interface BlocObserverOptions {\n  /* Called whenever any state changes global or local, Bloc or Cubit. */\n  onChange?: (bloc: BlocBase<any>, event: ChangeEvent<any>) => void;\n  /* Called only when a Bloc changes (global or local). */\n  onTransition?: (bloc: BlocBase<any>, event: TransitionEvent<any, any>) => void;\n}\n\nexport default class BlocObserver {\n  onChange: (bloc: BlocBase<any>, event: ChangeEvent<any>) => void\n  onTransition: (bloc: BlocBase<any>, event: TransitionEvent<any, any>) => void\n\n  constructor(methods: BlocObserverOptions = {}) {\n    this.onChange = methods.onChange ? methods.onChange : this.defaultAction;\n    this.onTransition = methods.onTransition ? methods.onTransition : this.defaultAction;\n  }\n\n  readonly addChange = (bloc: BlocBase<any>, state: any) => {\n    this.onChange(bloc, this.createChangeEvent(bloc, state));\n  }\n\n  readonly addTransition = (bloc: BlocBase<any>, state: any, event: any) => {\n    this.onTransition(bloc, this.createTransitionEvent(bloc, state, event));\n  }\n\n  private readonly defaultAction = () => {}\n\n  private createTransitionEvent(bloc: BlocBase<any>, state: any, event: any): TransitionEvent<any, any> {\n    return {\n      currentState: bloc.state,\n      event,\n      nextState: state,\n    }\n  }\n\n  private createChangeEvent(bloc: BlocBase<any>, state: any): ChangeEvent<any> {\n    return {\n      currentState: bloc.state,\n      nextState: state,\n    }\n  }\n}","import BlocBase from \"./BlocBase\";\nimport { BlocClass, ChangeEvent, ValueType } from \"./types\";\nimport BlocObserver from \"./BlocObserver\";\n\nexport interface ReactBlocOptions {\n  /** Enables debugging which calls BlocReact.observer every time a Subject is updated. Defaults to false */\n  debug?: boolean;\n}\n\nexport type BlocObserverScope = \"local\" | \"global\" | \"all\";\ntype BlocChangeObserverList = [\n  BlocClass<any>,\n  (bloc: any, event: ChangeEvent<any>) => unknown,\n  BlocObserverScope\n];\n\ntype BlocValueChangeObserverList = [\n  BlocClass<any>,\n  (bloc: any) => unknown,\n  BlocObserverScope\n];\n\nexport interface ProviderItem {\n  id: string,\n  parent?: string,\n  bloc: BlocBase<any>,\n}\n\nexport class BlocConsumer {\n  observer: BlocObserver;\n  public mocksEnabled = false;\n  providerList: ProviderItem[] = [];\n  protected _blocMapLocal: Record<string, BlocBase<any>> = {};\n  private blocListGlobal: BlocBase<any>[];\n  private blocChangeObservers: BlocChangeObserverList[] = [];\n  private blocValueChangeObservers: BlocValueChangeObserverList[] = [];\n  private mockBlocs: BlocBase<any>[] = [];\n\n  constructor(blocs: BlocBase<any>[]) {\n    this.blocListGlobal = blocs;\n    this.observer = new BlocObserver();\n\n    for (const b of blocs) {\n      b.consumer = this;\n      b.onRegister?.(this);\n    }\n  }\n\n  notifyChange(bloc: BlocBase<any>, state: any): void {\n    this.observer.addChange(bloc, state);\n\n    for (const [blocClass, callback, scope] of this.blocChangeObservers) {\n      const isGlobal = this.blocListGlobal.indexOf(bloc) !== -1;\n      const matchesScope =\n        scope === \"all\" ||\n        (isGlobal && scope === \"global\") ||\n        (!isGlobal && scope === \"local\");\n      if (matchesScope && bloc instanceof blocClass) {\n        callback(bloc, {\n          nextState: state,\n          currentState: bloc.state\n        });\n      }\n    }\n  }\n\n  notifyValueChange(bloc: BlocBase<any>): void {\n    for (const [blocClass, callback, scope] of this.blocValueChangeObservers) {\n      const isGlobal = this.blocListGlobal.indexOf(bloc) !== -1;\n      const matchesScope =\n        scope === \"all\" ||\n        (isGlobal && scope === \"global\") ||\n        (!isGlobal && scope === \"local\");\n      if (matchesScope && bloc instanceof blocClass) {\n        callback(bloc);\n      }\n    }\n  }\n\n  notifyTransition(bloc: BlocBase<any>, state: any, event: any): void {\n    this.observer.addTransition(bloc, state, event);\n  }\n\n  public addBlocChangeObserver<T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    callback: (bloc: T, event: ChangeEvent<ValueType<T>>) => unknown,\n    scope: BlocObserverScope = \"all\"\n  ) {\n    this.blocChangeObservers.push([blocClass, callback, scope]);\n  }\n\n  public addBlocValueChangeObserver<T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    callback: (bloc: T) => unknown,\n    scope: BlocObserverScope = \"all\"\n  ) {\n    this.blocValueChangeObservers.push([blocClass, callback, scope]);\n  }\n\n  public addLocalBloc(item: ProviderItem) {\n    this.providerList.push(item);\n    item.bloc.consumer = this;\n    item.bloc.onRegister?.(this);\n  }\n\n  public removeLocalBloc(key: string) {\n    const item = this.providerList.find(i => i.id !== key);\n    item?.bloc.complete();\n    this.providerList = this.providerList.filter(e => e !== item);\n  }\n\n  public addBlocMock(bloc: BlocBase<any>): void {\n    if (this.mocksEnabled) {\n      this.mockBlocs = [bloc, ...this.mockBlocs];\n    }\n  }\n\n  public resetMocks(): void {\n    this.mockBlocs = [];\n  }\n\n  public getGlobalBloc(blocClass: BlocClass<any>): undefined | BlocBase<any> {\n    if (this.mocksEnabled) {\n      const mockedBloc = this.mockBlocs.find((c) => c instanceof blocClass);\n      if (mockedBloc) {\n        return mockedBloc;\n      }\n    }\n\n    return this.blocListGlobal.find(c => c instanceof blocClass);\n  }\n\n  public getLocalBlocForProvider<T>(key: string, blocClass: BlocClass<T>): BlocBase<T> | undefined {\n    for (const providerItem of this.providerList) {\n      if (providerItem.id === key) {\n        if (providerItem.bloc instanceof blocClass) {\n          return providerItem.bloc;\n        }\n\n        let parent = providerItem.parent;\n        while (parent) {\n          const parentItem = this.providerList.find(i => i.id === parent);\n          if (parentItem?.bloc instanceof blocClass) {\n            return parentItem.bloc;\n          }\n\n          parent = parentItem?.parent;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  protected getBlocInstance<T>(global: BlocBase<any>[], blocClass: BlocClass<T>): BlocBase<T> | undefined {\n    if (this.mocksEnabled) {\n      const mockedBloc = this.mockBlocs.find((c) => c instanceof blocClass);\n      if (mockedBloc) {\n        return mockedBloc;\n      }\n    }\n\n    return global.find((c) => c instanceof blocClass);\n  }\n}\n","import React, { ReactElement, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport BlocBase from \"../BlocBase\";\nimport { BlocClass, BlocHookData, ChangeEvent, ValueType } from \"../types\";\nimport { BlocConsumer } from \"../BlocConsumer\";\n\ninterface ReactBlocOptions {\n}\n\ninterface BlocHookOptions<T extends BlocBase<any>> {\n  /*\n  Boolean value if the hook should update the returned state value when the BLoC state changes.\n  Set it to false if you only need access to the methods of a Cubit, or the `add` method on a Bloc\n   */\n  subscribe?: boolean;\n  /*\n  Decide weather the returned state value should be updated or not. Will have no effect if `subscribe` is false.\n  Receives a ChangeEvent<T> as a parameter and expects a boolean return value.\n   */\n  shouldUpdate?: (event: ChangeEvent<ValueType<T>>) => boolean;\n}\n\nconst defaultBlocHookOptions: BlocHookOptions<any> = {\n  subscribe: true\n};\n\nclass BlocRuntimeError {\n  error: Error;\n\n  constructor(message?: string) {\n    this.error = new Error(message);\n  }\n}\n\nclass NoValue {\n}\n\nexport class BlocReact extends BlocConsumer {\n  private readonly _blocsGlobal: BlocBase<any>[];\n  private _contextLocalProviderKey = React.createContext(\"\");\n\n  constructor(blocs: BlocBase<any>[]) {\n    super(blocs);\n    this._blocsGlobal = blocs;\n    this.BlocProvider = this.BlocProvider.bind(this);\n    this.BlocBuilder = this.BlocBuilder.bind(this);\n  }\n\n  useBloc = <T extends BlocBase<any>>(\n    blocClass: BlocClass<T>,\n    options: BlocHookOptions<T> = {}\n  ): BlocHookData<T> => {\n    const mergedOptions: BlocHookOptions<T> = {\n      ...defaultBlocHookOptions,\n      ...options\n    };\n    const localProviderKey = useContext(this._contextLocalProviderKey);\n    const localBlocInstance = this.getLocalBlocForProvider(localProviderKey, blocClass);\n    const { subscribe, shouldUpdate = true } = mergedOptions;\n    const blocInstance: undefined | BlocBase<T> = localBlocInstance || this.getBlocInstance(this._blocsGlobal, blocClass);\n\n    if (!blocInstance) {\n      const name = blocClass.prototype.constructor.name;\n      const error = new BlocRuntimeError(`\"${name}\" \n      no bloc with this name was found in the global context.\n      \n      # Solutions:\n      \n      1. Wrap your code in a BlocProvider.\n      \n      2. Add \"${name}\" to the \"BlocReact\" constructor:\n        const state = new BlocReact(\n          [\n            ...\n            new ${name}(),\n          ]\n        )\n      `);\n      console.error(error.error);\n      return ([\n        NoValue,\n        {},\n        {\n          error,\n          complete: true\n        }\n      ] as unknown) as BlocHookData<T>;\n    }\n\n    const [data, setData] = useState<ValueType<T>>(blocInstance.state as ValueType<T>);\n\n    const updateData = useCallback((nextState: ValueType<T>) => {\n      if (shouldUpdate === true || shouldUpdate({ nextState, currentState: data })) {\n        setData(nextState);\n      }\n    }, []);\n\n    useEffect(() => {\n      if (subscribe) {\n        const subscription = blocInstance.subscribe(updateData);\n        return () => subscription.unsubscribe();\n      }\n    }, []);\n\n    return [\n      data,\n      blocInstance as T\n    ];\n  };\n\n  // Components\n  BlocBuilder<T extends BlocBase<any>>(props: {\n    blocClass: BlocClass<T>;\n    builder: (data: BlocHookData<T>) => ReactElement;\n    shouldUpdate?: (event: ChangeEvent<ValueType<T>>) => boolean;\n  }): ReactElement | null {\n    const hook = this.useBloc(props.blocClass, {\n      shouldUpdate: props.shouldUpdate\n    });\n    return props.builder(hook);\n  };\n\n  BlocProvider<T extends BlocBase<any>>(props: {\n    children?: ReactElement | ReactElement[];\n    bloc: T | ((providerKey: string) => T);\n  }): ReactElement {\n    const providerKey = useMemo(() => \"p_\" + nanoid(), []);\n\n    const localProviderKey = useContext(this._contextLocalProviderKey);\n    const bloc = useMemo<T>(() => {\n      const newBloc = typeof props.bloc === \"function\" ? props.bloc(providerKey) : props.bloc;\n      if (newBloc) {\n        newBloc._localProviderRef = providerKey;\n        this.addLocalBloc({\n          bloc: newBloc,\n          id: providerKey,\n          parent: localProviderKey\n        });\n        // providerKey, newBloc\n      } else {\n        console.error(`BLoC is undefined`);\n      }\n      return newBloc;\n    }, []);\n\n    const context = useMemo<React.Context<BlocBase<any>>>(() => {\n      return React.createContext<BlocBase<any>>(bloc);\n    }, [bloc]);\n\n    useEffect(() => {\n      return () => {\n        this.removeLocalBloc(providerKey);\n      };\n    }, []);\n\n    return (\n      <this._contextLocalProviderKey.Provider value={providerKey}>\n        <context.Provider value={bloc}>{props.children}</context.Provider>\n      </this._contextLocalProviderKey.Provider>\n    );\n  };\n}\n"],"names":[],"mappings":"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"}