{"version":3,"file":"my-lib.mjs","sources":["../src/lib/blocBase.ts","../src/lib/bloc.ts","../src/lib/cubit.ts","../src/lib/react/blocReact.tsx"],"sourcesContent":["import { BehaviorSubject, Subscription } from \"rxjs\";\nimport { PartialObserver } from \"rxjs/src/internal/types\";\n\nexport interface BlocOptions {\n  persistKey?: string;\n  persistData?: boolean;\n}\n\nexport const cubitDefaultOptions: BlocOptions = {\n  persistKey: \"\",\n  persistData: true\n};\n\nexport default class BlocBase<T> {\n  onChange: null | ((change: { currentState: T; nextState: T }) => void) = null;\n  _localProviderRef = \"\";\n  private readonly _subject: BehaviorSubject<T>;\n  private readonly _options: BlocOptions;\n\n  constructor(initialValue: T, cubitOptions: BlocOptions = {}) {\n    const options = { ...cubitDefaultOptions, ...cubitOptions };\n    this._options = options;\n    let value = initialValue;\n\n    if (options.persistKey && options.persistData) {\n      const cachedValue = this.getCachedValue();\n      if (cachedValue) {\n        value = cachedValue;\n      }\n    }\n\n    this._subject = new BehaviorSubject(value);\n  }\n\n  public get subject(): BehaviorSubject<T> {\n    return this._subject;\n  }\n\n  public get state(): T {\n    return this.subject.getValue();\n  }\n\n  set persistData(setTo: boolean) {\n    const previousOptions = { ...this._options };\n    this._options.persistData = setTo;\n    if (!setTo) {\n      this.clearCache();\n    } else if (previousOptions.persistData === false) {\n      this.updateCache();\n    }\n  }\n\n  public getValue = (): T => this._subject.getValue();\n\n  public subscribe = (next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription => this._subject.subscribe(next, error, complete);\n\n  protected parseFromCache = (value: string): T => {\n    return JSON.parse(value).value;\n  };\n\n  protected parseToCache = (value: T): string => {\n    return JSON.stringify({ value });\n  };\n\n  protected notifyChange = (value: T): void => {\n    this.onChange?.({\n      currentState: this._subject.getValue(),\n      nextState: value\n    });\n  };\n\n  // caching\n  protected getCachedValue = (): T | undefined => {\n    const cachedValue = localStorage.getItem(\n      `data.${this._options.persistKey}`\n    );\n    if (cachedValue) {\n      try {\n        return this.parseFromCache(cachedValue);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n\n  protected updateCache = (): void => {\n    const { persistData, persistKey } = this._options;\n    if (persistData && persistKey) {\n      localStorage.setItem(\n        `data.${persistKey}`,\n        this.parseToCache(this.subject.getValue())\n      );\n    } else {\n      this.clearCache();\n    }\n  };\n\n  protected clearCache = (): void => {\n    const key = this._options.persistKey;\n    if (key && this._options.persistData) {\n      localStorage.removeItem(`data.${key}`);\n    }\n  };\n}\n","import BlocBase, { BlocOptions } from \"./blocBase\";\n\nexport default class Bloc<E, T> extends BlocBase<T> {\n  mapEventToState: (event: E) => T;\n  onTransition:\n    | null\n    | ((change: { currentState: T; event: E; nextState: T }) => void) = null;\n\n  constructor(initialState: T, options?: BlocOptions) {\n    super(initialState, options);\n    this.mapEventToState = () => initialState;\n  }\n\n  public add = (event: E): void => {\n    const newState = this.mapEventToState(event);\n    this.notifyChange(newState);\n    this.notifyTransition(newState, event);\n    this.subject.next(newState);\n    this.updateCache();\n  };\n\n  protected notifyTransition = (value: T, event: E): void => {\n    this.onTransition?.({\n      currentState: this.getValue(),\n      event,\n      nextState: value,\n    });\n  };\n}\n","import BlocBase from \"./blocBase\";\n\nexport default class Cubit<T> extends BlocBase<T> {\n  protected emit = (value: T): void => {\n    this.notifyChange(value);\n    this.subject.next(value);\n    this.updateCache();\n  };\n}\n","import React, {\n  ReactElement,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { nanoid } from \"nanoid\";\nimport BlocBase from \"../blocBase\";\n\ninterface BlocLordOptions {\n  /** Enables debugging which calls BlocReact.observer every time a Subject is updated. Defaults to false */\n  debug?: boolean;\n}\n\ntype ValueType<T extends BlocBase<any>> = T extends BlocBase<infer U>\n  ? U\n  : never;\n\ntype BlocHookData<T extends BlocBase<any>> = [\n  value: ValueType<T>,\n  instance: T,\n  stream: {\n    // stream: BehaviorSubject<T>;\n    error: any;\n    complete: boolean;\n  }\n];\n\ninterface BlocHookOptions<T extends BlocBase<any>> {\n  subscribe?: boolean;\n  shouldUpdate?: (previousState: ValueType<T>, state: ValueType<T>) => boolean;\n}\n\nconst defaultBlocHookOptions: BlocHookOptions<any> = {\n  subscribe: true,\n};\n\nexport class BlocReact {\n  observer: null | ((bloc: BlocBase<any>, value: any) => void) = null;\n  debug: boolean;\n  private readonly _blocListGlobal: BlocBase<any>[];\n  private readonly _contextGlobal: React.Context<BlocBase<any>[]>;\n  private _contextLocalProviderKey = React.createContext(\"\");\n\n  private _blocMapLocal: Record<string, BlocBase<any>> = {};\n\n  // private _contextMapLocal: Record<string, React.Context<Cubit<any>>> = {}\n\n  constructor(blocs: BlocBase<any>[], options: BlocLordOptions = {}) {\n    this._blocListGlobal = blocs;\n    this._contextGlobal = React.createContext(blocs);\n    this.debug = options.debug || false;\n\n    if (this.debug) {\n      for (const b of blocs) {\n        b.subject.subscribe((v: any) => this.notify(b, v));\n      }\n    }\n  }\n\n  notify(bloc: BlocBase<ValueType<any>>, value: ValueType<any>): void {\n    if (this.observer) {\n      this.observer(bloc, value);\n    }\n  }\n\n  useBloc = <T extends BlocBase<any>>(\n    blocClass: new (...args: never[]) => T,\n    options: BlocHookOptions<T> = {}\n  ): BlocHookData<T> => {\n    const mergedOptions: BlocHookOptions<T> = {\n      ...defaultBlocHookOptions,\n      ...options,\n    };\n\n    const localProviderKey = useContext(this._contextLocalProviderKey);\n    const localBlocInstance = this._blocMapLocal[localProviderKey];\n\n    const { subscribe, shouldUpdate = true } = mergedOptions;\n    const blocs = useContext(this._contextGlobal);\n    const blocInstance =\n      localBlocInstance || blocs.find((c) => c instanceof blocClass);\n\n    if (!blocInstance) {\n      throw new Error(`No block found for ${blocClass}`);\n    }\n\n    const [data, setData] = useState(blocInstance.getValue());\n    const [error, setError] = useState();\n    const [complete, setComplete] = useState(false);\n\n    const updateData = useCallback((newState: ValueType<T>) => {\n      if (shouldUpdate === true || shouldUpdate(data, newState)) {\n        setData(newState);\n      }\n    }, []);\n\n    useEffect(() => {\n      if (subscribe) {\n        const subscription = blocInstance.subscribe(\n          updateData,\n          setError,\n          () => setComplete(true)\n        );\n        return () => subscription.unsubscribe();\n      }\n    }, [this._contextGlobal]);\n\n    return [\n      data,\n      blocInstance as T,\n      {\n        error,\n        complete,\n      },\n    ];\n  };\n\n  // Components\n  BlocBuilder = <T extends BlocBase<any>>(props: {\n    bloc: new (...args: never[]) => T;\n    builder: (data: BlocHookData<T>) => ReactElement;\n    shouldUpdate?: (\n      previousState: ValueType<T>,\n      state: ValueType<T>\n    ) => boolean;\n  }): ReactElement => {\n    return props.builder(\n      this.useBloc(props.bloc, {\n        shouldUpdate: props.shouldUpdate,\n      })\n    );\n  };\n\n  GlobalBlocProvider = (props: {\n    children?: ReactElement | ReactElement[];\n  }): ReactElement => {\n    return (\n      <this._contextGlobal.Provider value={this._blocListGlobal}>\n        {props.children}\n      </this._contextGlobal.Provider>\n    );\n  };\n\n  BlocProvider = <T extends BlocBase<any>>(props: {\n    children?: ReactElement | ReactElement[];\n    create: (providerKey: string) => T;\n  }): ReactElement => {\n    const providerKey = useMemo<string>(() => \"p_\" + nanoid(), []);\n\n    const bloc = useMemo<T>(() => {\n      const newBloc = props.create(providerKey);\n      newBloc._localProviderRef = providerKey;\n      this._blocMapLocal[providerKey] = newBloc;\n\n      if (this.debug) {\n        newBloc.subject.subscribe((v: any) => this.notify(newBloc, v));\n      }\n\n      return newBloc;\n    }, []);\n\n    const context = useMemo<React.Context<BlocBase<any>>>(() => {\n      return React.createContext<BlocBase<any>>(bloc);\n      // this._contextMapLocal[providerKey] = newContext;\n    }, [bloc]);\n\n    useEffect(() => {\n      return () => {\n        bloc.subject.complete();\n        delete this._blocMapLocal[providerKey];\n      };\n    }, []);\n\n    return (\n      <this._contextLocalProviderKey.Provider value={providerKey}>\n        <context.Provider value={bloc}>{props.children}</context.Provider>\n      </this._contextLocalProviderKey.Provider>\n    );\n  };\n}\n"],"names":[],"mappings":"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"}